---
import Header from '../components/Header.astro'
import Sidebar from '../components/Sidebar.astro'
import CurrentLinkHighlight from '../components/CurrentLinkHighlight.astro'
import HeadingCopyButton from '../components/HeadingCopyButton.astro'
import Glitch from '../components/Glitch.astro'

const {
  frontmatter: { title = '404', description, file } = {} as Record<
    string,
    string
  >,
} = Astro.props

let source = 'https://github.com/artalar/reatom'
if (file) {
  if (file.startsWith('core')) {
    source = 'https://github.com/artalar/reatom/blob/v3/packages/core/README.md'
  } else if (file.startsWith('index')) {
    source = 'https://github.com/artalar/reatom/blob/v3/README.md'
  } else if (file.includes('packages')) {
    const name = file.match(/packages\/(.*)\.md/)?.[1]
    source = `https://github.com/artalar/reatom/tree/v3/packages/${name}/README.md`
  }
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    {description ? <meta name="description" content={description} /> : null}
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" href="/styles/common.css" />
    <link rel="stylesheet" href="/styles/tags.css" />
    <link rel="stylesheet" href="/styles/fonts.css" />
    <meta name="generator" content={Astro.generator} />
  </head>
  <body>
    <Header source={source} />
    <div class="container">
      <Sidebar />
      <main>
        <div class="wrapper">
          <h1>{title}</h1>
          <slot />
          <footer>
            <a href="https://github.com/artalar/reatom" target="_blank"
              >github</a
            >
          </footer>
        </div>
      </main>
    </div>
    <script>
      document.querySelector('main')?.scrollIntoView()
    </script>
    <CurrentLinkHighlight />
    <HeadingCopyButton />
    <Glitch />
    <script client>
      if (import.meta.env.PROD) {
        requestAnimationFrame(async () => {
          await navigator.serviceWorker
            ?.register('/sw.js')
            .then((registration) => registration.update())
            .catch(() => null)

          // console.log('client ready')

          const broadcast = new BroadcastChannel('sw')
          broadcast.postMessage({ type: 'client-ready' })
          broadcast.onmessage = ({ data, source }) => {
            // console.log('client message')
            if (
              data?.type === 'hot-update' &&
              location.pathname === new URL(data.url).pathname
            ) {
              source?.postMessage({ type: 'hot-update-received' })

              const doc = new DOMParser().parseFromString(
                data.text,
                'text/html',
              )
              const newMain = doc.querySelector('main')
              const main = document.querySelector('main')

              if (!newMain || newMain.innerHTML === main.innerHTML) {
                // console.log('cliens mains is equal')
                return
              }

              // console.log('cliens mains is not equal')

              // TODO show toast?
              main.replaceWith(newMain)
              setTimeout(() => window.ADD_COPY_BUTTONS())
            }
          }
        })
      }
    </script>
    <script defer src="/_vercel/insights/script.js"></script>
  </body>
</html>

<style scoped>
  .container {
    display: grid;
    width: 100%;
    grid-template-columns: var(--aside-width) auto;
  }

  main .wrapper {
    max-height: calc(100vh - var(--header-height));
    margin: auto;
    width: min(100vw, 55rem);
    max-width: 55rem;
    padding: 0 1rem;
    display: flex;
    flex-direction: column;
  }
</style>
